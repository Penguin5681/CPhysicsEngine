// ... (Includes, Constants, Helper Functions, createBox) ...

FUNCTION main():
    // ... (Window, ImGui Init, Physics Setup) ...

    std::vector<RigidBody*> bodies;
    std::vector<sf::Shape*> shapes;
    std::vector<CollisionShape*> shapeDataToDelete;

    // --- Create Initial Objects (Floor) ---
    // ... (Create floorBody, floorGfx, add to vectors/world) ...

    // --- Game Loop ---
    WHILE window.isOpen():
        // ... (Event Handling Loop: pollEvent, ImGui::SFML::ProcessEvent, window close) ...

        // --- Update ImGui ---
        sf::Time deltaTime = deltaClock.restart();
        ImGui::SFML::Update(window, deltaTime);
        ImGui::NewFrame();

        // --- Define ImGui UI ---
        ImGui::Begin("Info & Controls");
        ImGui::Text("FPS: %.1f", io.Framerate);
        // Add physics info if desired

        // --- NEW: Spawn Button ---
        IF ImGui::Button("Spawn Box") THEN
            // Create a new box when button clicked
            Vector3 spawnPos( ((rand() % 200) / 100.0f - 1.0f) * 5.0f, // Random X between -5 and +5
                               15.0f, // Spawn high up
                               0.0f );
            Vector3 boxHalfExtents(1.0f, 1.0f, 1.0f); // Standard 2x2x2 box
            float boxMass = 5.0f;
            float boxRestitution = 0.2f;
            float boxStaticFriction = 0.6f;
            float boxDynamicFriction = 0.5f;

            // Create physics body
            RigidBody* newBox = createBox(spawnPos, boxHalfExtents, boxMass, boxRestitution, boxStaticFriction, boxDynamicFriction);
            // Optionally give it a random initial rotation
            // newBox->orientation = ... ; newBox->orientation.normalize();

            // Add to physics world
            world.addBody(newBox);

            // Keep track for graphics update and cleanup
            bodies.push_back(newBox);
            shapeDataToDelete.push_back(newBox->shape); // Store shape data ptr for later deletion

            // Create graphics shape
            sf::RectangleShape* newBoxGfx = new sf::RectangleShape();
            newBoxGfx->setSize({boxHalfExtents.x * 2.0f * PIXELS_PER_METER,
                                boxHalfExtents.y * 2.0f * PIXELS_PER_METER});
            newBoxGfx->setOrigin({boxHalfExtents.x * PIXELS_PER_METER,
                                  boxHalfExtents.y * PIXELS_PER_METER});
            // Assign a random color (requires <cstdlib> for rand)
            newBoxGfx->setFillColor(sf::Color(rand() % 200 + 55, rand() % 200 + 55, rand() % 200 + 55));
            shapes.push_back(newBoxGfx); // Add graphics shape pointer to list

        END IF
        // --- End Spawn Button ---

        ImGui::End(); // End "Info & Controls" window
        ImGui::EndFrame();

        // --- Physics Step ---
        // ... (world.step(timeStep)) ... // No changes here

        // --- Update Graphics ---
        // ... (Loop through bodies/shapes, update position/rotation) ... // No changes here

        // --- Draw ---
        // ... (window.clear, draw shapes, ImGui::Render, ImGui::SFML::Render, window.display) ... // No changes here

    END WHILE // End game loop

    // --- Cleanup ---
    // ... (Cleanup loops remain the same, will handle newly added objects) ...

    RETURN 0;
END FUNCTION