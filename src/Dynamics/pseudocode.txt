// Updates the orientation quaternion by the angular velocity for a given duration
        FUNCTION updateByAngularVelocity(Vector3 angularVelocity, float dt)
            // Create a temporary "pure" quaternion from the angular velocity
            DEFINE rotationQuat = Quaternion(0,
                                             angularVelocity.x * dt,
                                             angularVelocity.y * dt,
                                             angularVelocity.z * dt)

            // Multiply our current orientation by this new rotation
            // *this = *this * rotationQuat
            // This is a simplified integration. We'll refine it later.
            // A more correct way is: *this += 0.5 * rotationQuat * (*this)
        END FUNCTION